// Code generated by protoc-gen-go.
// source: pb/fingerprint.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pb/fingerprint.proto
	pb/result.proto

It has these top-level messages:
	Fingerprint
	Result
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Fingerprint struct {
	Group            string              `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Username         string              `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Location         string              `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Timestamp        uint64              `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	WifiFingerprints *Fingerprint_Router `protobuf:"bytes,6,opt,name=wifi_fingerprints,json=wifiFingerprints" json:"wifi_fingerprints,omitempty"`
}

func (m *Fingerprint) Reset()                    { *m = Fingerprint{} }
func (m *Fingerprint) String() string            { return proto.CompactTextString(m) }
func (*Fingerprint) ProtoMessage()               {}
func (*Fingerprint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Fingerprint) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Fingerprint) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Fingerprint) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Fingerprint) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Fingerprint) GetWifiFingerprints() *Fingerprint_Router {
	if m != nil {
		return m.WifiFingerprints
	}
	return nil
}

// Router is nested type of WiFi fingerprints
type Fingerprint_Router struct {
	Mac  string `protobuf:"bytes,1,opt,name=mac" json:"mac,omitempty"`
	Rssi int64  `protobuf:"varint,2,opt,name=rssi" json:"rssi,omitempty"`
}

func (m *Fingerprint_Router) Reset()                    { *m = Fingerprint_Router{} }
func (m *Fingerprint_Router) String() string            { return proto.CompactTextString(m) }
func (*Fingerprint_Router) ProtoMessage()               {}
func (*Fingerprint_Router) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Fingerprint_Router) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

func (m *Fingerprint_Router) GetRssi() int64 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func init() {
	proto.RegisterType((*Fingerprint)(nil), "pb.Fingerprint")
	proto.RegisterType((*Fingerprint_Router)(nil), "pb.Fingerprint.Router")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FingerprintService service

type FingerprintServiceClient interface {
	Learn(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Result, error)
	Track(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Result, error)
}

type fingerprintServiceClient struct {
	cc *grpc.ClientConn
}

func NewFingerprintServiceClient(cc *grpc.ClientConn) FingerprintServiceClient {
	return &fingerprintServiceClient{cc}
}

func (c *fingerprintServiceClient) Learn(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/pb.FingerprintService/Learn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fingerprintServiceClient) Track(ctx context.Context, in *Fingerprint, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/pb.FingerprintService/Track", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FingerprintService service

type FingerprintServiceServer interface {
	Learn(context.Context, *Fingerprint) (*Result, error)
	Track(context.Context, *Fingerprint) (*Result, error)
}

func RegisterFingerprintServiceServer(s *grpc.Server, srv FingerprintServiceServer) {
	s.RegisterService(&_FingerprintService_serviceDesc, srv)
}

func _FingerprintService_Learn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fingerprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintServiceServer).Learn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FingerprintService/Learn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintServiceServer).Learn(ctx, req.(*Fingerprint))
	}
	return interceptor(ctx, in, info, handler)
}

func _FingerprintService_Track_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fingerprint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FingerprintServiceServer).Track(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FingerprintService/Track",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FingerprintServiceServer).Track(ctx, req.(*Fingerprint))
	}
	return interceptor(ctx, in, info, handler)
}

var _FingerprintService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FingerprintService",
	HandlerType: (*FingerprintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Learn",
			Handler:    _FingerprintService_Learn_Handler,
		},
		{
			MethodName: "Track",
			Handler:    _FingerprintService_Track_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/fingerprint.proto",
}

func init() { proto.RegisterFile("pb/fingerprint.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x51, 0x3d, 0x4e, 0xc3, 0x30,
	0x14, 0x96, 0x9b, 0x34, 0xa2, 0x2f, 0x43, 0x5b, 0xab, 0x42, 0x51, 0xd4, 0x21, 0xca, 0x14, 0x75,
	0x48, 0xa4, 0x32, 0x20, 0x75, 0x45, 0x62, 0x62, 0x32, 0xec, 0xc8, 0x89, 0xdc, 0xc8, 0x22, 0xb1,
	0x2d, 0xdb, 0x81, 0x9d, 0x81, 0x0b, 0x70, 0x34, 0xae, 0xc0, 0xcc, 0x19, 0x90, 0x9d, 0x42, 0x23,
	0x26, 0xb6, 0xf7, 0xfd, 0xbd, 0xf7, 0x25, 0x86, 0x8d, 0xaa, 0xab, 0x23, 0x17, 0x2d, 0xd3, 0x4a,
	0x73, 0x61, 0x4b, 0xa5, 0xa5, 0x95, 0x78, 0xa6, 0xea, 0x74, 0xdb, 0x4a, 0xd9, 0x76, 0xac, 0xa2,
	0x8a, 0x57, 0x54, 0x08, 0x69, 0xa9, 0xe5, 0x52, 0x98, 0xd1, 0x91, 0x2e, 0x55, 0x5d, 0x69, 0x66,
	0x86, 0xee, 0x14, 0xc9, 0xbf, 0x10, 0xc4, 0xb7, 0xe7, 0x45, 0x78, 0x03, 0xf3, 0x56, 0xcb, 0x41,
	0x25, 0x28, 0x43, 0xc5, 0x82, 0x8c, 0x00, 0xa7, 0x70, 0x31, 0x18, 0xa6, 0x05, 0xed, 0x59, 0x32,
	0xf3, 0xc2, 0x2f, 0x76, 0x5a, 0x27, 0x1b, 0x7f, 0x25, 0x09, 0x46, 0xed, 0x07, 0xe3, 0x2d, 0x2c,
	0x2c, 0xef, 0x99, 0xb1, 0xb4, 0x57, 0x49, 0x98, 0xa1, 0x22, 0x24, 0x67, 0x02, 0xdf, 0xc0, 0xfa,
	0x85, 0x1f, 0xf9, 0xe3, 0xe4, 0x43, 0x4c, 0x12, 0x65, 0xa8, 0x88, 0xf7, 0x97, 0xa5, 0xaa, 0xcb,
	0x49, 0xaf, 0x92, 0xc8, 0xc1, 0x32, 0x4d, 0x56, 0x2e, 0x30, 0xe1, 0x4d, 0x5a, 0x42, 0x34, 0x6a,
	0x78, 0x05, 0x41, 0x4f, 0x9b, 0x53, 0x71, 0x37, 0x62, 0x0c, 0xa1, 0x36, 0x86, 0xfb, 0xca, 0x01,
	0xf1, 0xf3, 0xfe, 0x0d, 0x01, 0x9e, 0x2c, 0xb8, 0x67, 0xfa, 0x99, 0x37, 0x0c, 0x5f, 0xc3, 0xfc,
	0x8e, 0x51, 0x2d, 0xf0, 0xf2, 0xcf, 0xe5, 0x14, 0x1c, 0x41, 0xfc, 0x3f, 0xcb, 0xd7, 0xaf, 0x1f,
	0x9f, 0xef, 0xb3, 0x38, 0x8f, 0xaa, 0xce, 0x99, 0x0f, 0x68, 0xe7, 0x82, 0x0f, 0x9a, 0x36, 0x4f,
	0xff, 0x0d, 0x5a, 0x67, 0x3e, 0xa0, 0x5d, 0x1d, 0xf9, 0x07, 0xb8, 0xfa, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0x25, 0x21, 0xbb, 0xae, 0xcb, 0x01, 0x00, 0x00,
}
